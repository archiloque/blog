= Links - Soon
Julien Kirch
v1.0, 2021-01-01
:article_lang: en
:figure-caption!:
:article_description: 

== link:https://www.gwern.net/docs/technology/2005-shirky-agroupisitsownworstenemy.pdf[A group is its own worst enemy]

[quote]
____
This pattern has happened over and over and over again. Someone built the system; they assumed certain user behaviors. The users came on and exhibited different behaviors. And the people running the system discovered to their horror that the technological and social issues could not in fact be decoupled. This story has been written many times. It’s actually frustrating to see how many times it’s been written, because although there’s a wealth of documentation from the field, people starting similar projects often haven’t read these accounts.

The most charitable description of this repeated pattern is "`learning from experience`", but learning from experience is the worst possible way to learn something. Learning from experience is one up from remembering -- that’s not great. The best way to learn something is when someone else figures it out and tells you: "`Don’t go in that swamp. There are alligators in there`".
____

== link:https://danluu.com/people-matter/[Individuals matter]

[quote]
____
What I've seen happen instead is, when work starts on the projects, people will ask who's working the project and then will make a guess at whether or not the project will be completed on time or in an effective way or even be completed at all based on who ends up working on the project. "`Oh, Joe is taking feature X? He never ships anything reasonable. Looks like we can't depend on it because that's never going to work. Let's do Y instead of Z since that won't require X to actually work`". The roadmap creation and review process maintains the polite fiction that people are interchangeable, but everyone knows this isn't true and teams that are effective and want to ship on time can't play along when the rubber hits the road even if they play along with the managers, directors, and VPs, who create roadmaps as if people can be generically abstracted over.

Another place the non-fungability of people causes predictable problems is with how managers operate teams. Managers who want to create effective teams end up fighting the system in order to do so. Non-engineering orgs mostly treat people as fungible, and the finance org at a number of companies I've worked for forces the engineering org to treat people as fungible by requiring the org to budget in terms of headcount. The company, of course, spends money and not "`heads`", but internal bookkeeping is done in terms of "`heads`", so $X of budget will be, for some team, translated into something like "`three staff-level heads`". There's no way to convert that into "`two more effective and better-paid staff level heads`". If you hire two staff engineers and not a third, the "`head`" and the associated budget will eventually get moved somewhere else.
____

= Links - Soon
Julien Kirch
v1.0, 2023-01-01
:article_lang: en
:figure-caption!:
:article_description: 

== link:https://www.devever.net/~hl/stringtemplates[Producing HTML using string templates has always been the wrong solution]

[quote]
____
There are broadly two approaches used to generate (X)HTML in web
applications today:

* string templating systems;
* AST-based representation, transformation and serialization;

Historically, the majority of server-side web applications have tended
to produce HTML output using string templating systems. String template
approaches remain vastly more popular than AST-based approaches.

This is unfortunate, as I've come to the conclusion for some years now
that the use of string templating systems to generate HTML is
fundamentally the wrong approach.
____


== link:https://hachyderm.io/@stargirl/109697057391904145[So you want to solve Python packaging: a practical guide]

[quote]
____
Fundamentally these users do not want to think about this shit, and they're a _huge_ group of users. You know who does think about this shit? Web developers, and every time someone comes along with "Python packaging sucks and someone should fix it" they're a web dev.

That's because web devs have different expectations. They _expect_ to work with a packaging tool. They expect to find and install dependencies. They don't expect to work with a ton of native dependencies. They don't have the same problems.
____

== link:https://css-tricks.com/the-great-divide/[The great divide]

[quote]
____
The divide is between people who self-identify as a (or have the job title of) front-end developer, yet have divergent skill sets.

_On one side_, an army of developers whose interests, responsibilities, and skillsets are heavily revolved around JavaScript.

_On the other_, an army of developers whose interests, responsibilities, and skillsets are focused on other areas of the front end, like HTML, CSS, design, 
____

== link:https://cohost.org/lifning/post/855402-blockquote-style-m[Game design coding perverts love dwarf fortress]

[quote]
____
The reason all the game design coding perverts love dwarf fortress is because tarn Adams succeeded where every single one of us has failed: he made a weird procgen system that does solely what he wants to do and is never focused on User Friendliness and rather focused on "`can I simulate an entire world's history`" and cares more about what weird shit he wants to add then about best coding practices and is the sort of project where you spend 3 months researching plants to try and figure out what makes them edible so that you can decide how to generate a garden better without ever considering how the user will interface with the garden

and people loved it and bought it

everyone wants to do exactly this sort project of project where they never have to consider "game design" or "win conditions" or such dumb things and instead be called cool and sexy for the way that they made weather randomly come about because of their atmospheric conditions simulation

only he, god among game devs, has succeeded at making his weird personal expiriment sexy like that and we're all jealous and in awe
____

== link:https://cohost.org/mcc/post/765838-i-spent-my-new-years[I spent my New Years Eve in VR (unsuccessfully)]

[quote]
____
This will be relevant in the story I'm about to tell. _You can't just enter a VRChat space._ Even events _intended to be public_ involve misdirection, Discords pointing to other Discords, and fliers with coded language and implied access mechanisms. I think of the elaborate rituals gay subcultures used in link:https://everything2.com/title/Gay+subcultures+in+eighteenth+century+Europe[eighteenth-century cruising routes] to ensure the person they were propositioning was a fellow queer and not a police informant, except instead of trying to solicit gay sex, they are trying to have a normal human interaction. Maybe some of them have gay sex afterward, I don't know. It doesn't seem to be the focus.
____

== link:https://buttondown.email/hillelwayne/archive/use-the-wrong-tool-for-the-job/[Use the wrong tool for the job]

[quote]
____
I'm inclined to think that the benefits of familiar tooling is
_enormous_, such that you're often better using a wrong-but-familiar
tool than a right-but-exotic tool. And there's a problem with that. What
you're familiar with is highly circumstantial. If a team wants to make a
slick web app, but all they know is Fortran, then they have a good
argument for writing the app backend in Fortran.

…And then, if they need a yaml parser or a pdf generator or a job queue,
then those should be in Fortran too. Over time, all language ecosystems
will develop all possible language tooling, even if the tooling is for a
purpose the language is completely unsuited to. Because
no matter how wrong a tool is for the job, proper familiarity can turn
it into the right tool.

(Obviously there's a limit to this, which is why some webtech companies
have migrated their Ruby and Python codebases to things like Go or
TypeScript.)

This also _changes_ what the right tool for the job is. If you ask me,
Python isn't that good _as a language_ for scientific computing, both
due to performance impedance and because of how hard it is to pipeline
data. But because it has the large data ecosystem, it's more appropriate
now for that kind of work. Other languages now have more impedance
because you'd need to reproduce those libraries.
____


== link:https://patrickbrosset.com/articles/2023-01-17-web-storage/[(Almost) everything about storing data on the web]

[quote]
____
Imagine you're building a web application and you want to store some
data locally on the user's device. This could be because this data is
only needed on the client-side, or it could be because you want to offer
some kind of offline access to the your app's content.

To do this, you'll need to store data on the device that's running your
app. You might be asking yourself:

. Can I actually store all the data I need?
. Can I trust the browser to really persist it?
. How much space do I have?

The answers are better than you might think:

. Can I actually store all the data I need? _Sure, you can store all kinds of data, and a lot of it too._
. Can I trust the browser to really persist it? _Yes you can._
. How much space do I have? _A lot, in most cases!_

But as always, the devil is in the details! Let's try to dive into these
details.
____


== link:https://lethain.com/eng-org-meetings/[Meetings for an effective eng organization]

[quote]
____
Some engineers develop a strong point of view that meetings are a waste
of their time. There's good reason for that perspective, as many
meetings are quite bad, but it's also a bit myopic: meetings can also be
an exceptionally valuable part of a well-run organization. If you're
getting feedback that any given meeting isn't helpful, then iterate on
it, and consider pausing it for the time being. It may not be useful for
your organization yet, but don't give up on the idea of meetings.

Good meetings are the heartbeat for your organization.

If you look hard enough, you can find narrow exceptions, but the vast
majority of well-run organizations anchor around a few valuable
meetings, and they're likely the best starting point for your
organization as well. (As an aside, if you want to read a second,
excellent take on meetings, I highly recommend
link:https://medium.learningbyshipping.com/reaching-peak-meeting-efficiency-f8e47c93317a[Steven Sinofsky's], which is exceptionally good.)

The most effective communication within an organization is between peers
or between managers and their direct team. Your technology strategy is
best communicated in a written document. The clearest plan is tracked in
a ticket tracker or a document. None of these ideal approaches are large
meetings, which isn't too surprising: large meetings are rarely the best
communication solution for any particular goal. However, they are a
remarkably effective backup solution when there are gaps in your default
approaches.
____

[quote]
____
Finally, I find that many organizations split meetings prematurely because there are one or two individuals who behave badly in important meetings. For example, you may have an antagonistic engineer who joins every technical spec review meeting to advocate for a particular technology. It’s extremely valuable to solve that problem by holding that engineer accountable to a higher communication standard. You cannot scale large meetings without holding participants responsible for their behavior.
____

== link:https://medium.learningbyshipping.com/reaching-peak-meeting-efficiency-f8e47c93317a[Reaching peak meeting efficiency]

[quote]
____
When you bring together a team of talented and diverse individuals, the only way they will come to operate as a team is by spending time talking, listening, and understanding the perspective individuals bring to contribute to a larger whole. Unless everyone hired shares the same background and experiences, there’s no way a group of people can converge to a high-performance team without meeting, sharing, and learning together. No amount of ping-pong, email, or shared docs can substitute for meeting.
____

[quote]
____
If you believe that you reached a decision on a really contentious topic in a meeting and jumped to "`close`" at the very end of the time, then one can probably say with certainty the _decision will be revisited shortly_. Chances are someone with key input wasn’t present or didn’t get a chance to contribute and will find a way to either re-open the decision or provide information to someone who will.

_Nothing good ever came from voting at a meeting._ Just don’t ever vote. Companies are not democracies, and you also do not want to memorialize winning and losing “sides” of an issue. If a person’s position isn’t clear, ask questions, but cornering them only raises the stakes and reduces accountability.
____

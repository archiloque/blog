= Links - Soon
Julien Kirch
v1.0, 2024-01-01
:article_lang: en
:figure-caption!:
:article_description: 

== link:https://ittavern.com/visual-guide-to-ssh-tunneling-and-port-forwarding/[Visual guide to SSH tunneling and port forwarding]

[quote]
____
To make it quick, I wish I had known about port forwarding and tunneling earlier. With this blog post, I try to understand it better myself and share some experiences and tips with you.
____

== link:https://aras-p.info/blog/2024/09/14/Vector-math-library-codegen-in-Debug/[Vector math library codegen in Debug]

[quote]
____
Debug build (no optimizations at all) performance of any C++ code style is really bad. The only way I could make it acceptable, while still being C++, is by specializing code for common cases, which I achieved byâ€¦ using _C preprocessor macros_ ðŸ¤¦.
____

== link:https://www.jovo.design/writing/queer-systems[Queering design systems thinking]

[quote]
____
Cis-heteronormativity is a product of _design_, which Viktor Papanek defines, in his 1971 book, Design for the Real World, as "`the conscious effort to impose a meaningful order`". To, again, make over our experiences in the image of the system.

Stanford professor and journalist Fred Turner describes design as "`the process by which the politics of one world become the constraints on another`".

Our design systems are both an outcome of and acts of social construction.

"`Socially constructed`" is not the same as "`not real`" Or "`bad`". The way in which these norms shape our work and the ways in which our work shapes the experience of our users is very real -- and can even be beneficial.

But what I hope we, as a professional community, can learn from queerness is the ability to see the invisible mechanisms of our systems for what they are, and the nerve to question if they really are benefitting us.
____

[quote]
____
Intuitively, I think the design systems community understands the power of language, especially naming. Language has the power to shape the things that it describes. The chronically online among us may already recognize this process as "`discourse`".

Discourse is the mechanism by which labeling a set of behaviors homosexual actually helped create a cultural identity around which a community can form.

Discourse is also what's transformed a collection of technical artifacts and collaborative processes into a unique discipline called design systems.

And discourse is how we draw the boundaries of what a design system is, and isn't, and who is and isn't part of this professional community.

How many times have you been at a design systems event and heard a speaker say something to the effect of, "`Your Figma library is not a design system`", when a Figma library happens to be what your team is organizing collaboration around?

It's like, "`fuck my drag, right?`"

We talk like Figma is drag to Code's gender. Like it's a performative copy of something "`real`". But really good drag isn't about the imitation of gender, it's about exposing the performative nature of all gender. Even cisgender women and men are performing against gendered ideals that, like Quetelet's measurements of the average man, no one _really fulfills_. (We just don't recognize it as easily because gender explodes more quietly than a fighter jet.)

The coded component library is also a copy of a copy of an ideal you won't find out in the world. There is no single, "`true`" product for our systems to document because the product _experience_ is created in relationship to each individual user in the context in which they use it.

Neither Figma nor code libraries are your design system. They are both affordances of the larger systems through which design work happens. They signify to the user what's possible through and prohibited by the system.
____


== link:https://www.baldurbjarnason.com/2024/liskovs-gun/[Liskovâ€™s Gun: The parallel evolution of React and Web Components]

[quote]
____
Unless you're like me -- an "`extremely online`" kind of web developer â€“ you probably don't notice the dramas and brouhahas that erupt in the web developer community with regularity. Most of the time these flame-wars offer little of value or less in terms of technical insight and the patter of angry voices fades away before it reaches the ears of the less online.

But a recent one, which began when the maintainer of the _SolidJS_ web development framework wrote a long and very angry-sounding blog post outlining why link:https://dev.to/ryansolid/web-components-are-not-the-future-48bh[he didn't think web components represented the future of web development], is a little bit less usual. Not because it has staying power. It's fading away at the same steady pace as these things usually do.

It's interesting because it touches on what I think is a genuinely interesting technical issue, but in a way that pretty much forces every reader to ignore it.
____

[quote]
____
Described this way, you might wonder how an otherwise innocuous set of web APIs, designed to aid in the making of reusable widgets, so consistently cause tension and conflict among web developers. So much so that it's almost certainly a very bad idea for me to wade into it with this essay.

_Why do Web Components cause online web developer communities to erupt in anger and argument?_

To answer _that_, we need to go back over a _decade_, at least thirteen years, all the way back to 2011.
____

[quote]
____
But, sure, the data only flows one way. You just need to have curious definitions of the words "`flow`", "`one`", "`way`", and "`data`".
____

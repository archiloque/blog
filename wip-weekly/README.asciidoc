= Links - Soon
Julien Kirch
v1.0, 2021-01-01
:article_lang: en
:figure-caption!:
:article_description: agile methods, CLI, alerts

== link:https://www.geepawhill.org/2021/04/27/on-agile-methods/[On agile methods]

[quote]
____
No current "Agile" method can create high-performing software development teams.

I don't endorse any of them. I don't sell them. I don't coach them. I actively advocate against adopting them.

I said I wasn't ready yet to propose a positive view, and I'm not. But.

I can tell you what things I will demand of any future method before I even consider embracing it.

. It must focus explicitly on the development of what I have called community -- active, dynamic, mutually beneficial, and healthy relationships between human beings.
. It must describe multi-option multi-variant multi-step paths from a number of "`heres`" to the "`there`" it proposes.
. It must address causation as multi-source, multi-effect, multi-directional and multi-layer, rather than the naive mechanical models with their single causes always arising in single directions from a single "`above`".

I won't accept less than that, and I will most likely want more, much more. I would hope that the whole trade would join me in this.
____

== link:https://clig.dev/[Command Line Interface Guidelines]

[quote]
____
Traditionally, UNIX commands were written under the assumption they were going to be used primarily by other programs. They had more in common with functions in a programming language than with graphical applications.

Today, even though many CLI programs are used primarily (or even exclusively) by humans, a lot of their interaction design still carries the baggage of the past. It’s time to shed some of this baggage: if a command is going to be used primarily by humans, it should be designed for humans first.
____

[quote]
____
_For maximum portability, environment variable names must only contain uppercase letters, numbers, and underscores (and mustn’t start with a number)_. Which means `O_O` and `OWO` are the only emoticons that are also valid environment variable names.
____

== link:https://utcc.utoronto.ca/~cks/space/blog/sysadmin/AlertsHaveIntentions[Sometimes alerts have inobvious reasons for existing]

[quote]
____
Another very important corollary is link:https://utcc.utoronto.ca/~cks/space/blog/sysadmin/ConfigMgmtIsNotDocumentation[the same thing we saw for configuration management] and link:https://utcc.utoronto.ca/~cks/space/blog/sysadmin/ProceduresAreNotDocumentation[procedures], which is that by themselves your alerts don't tell you why you put them into place, just what you're alerting on. Understanding why an alert exists is important, so you want to document that too, in comments or in the alert messages or both. Even if the bare alert seems to be obviously sensible, you should document why you picked that particular thing to alert on to tell you about the overall problem. It's probably useful to describe what high level problem (or problems) the alert is trying to pick up on, since that isn't necessarily obvious either.

Having this sort of "`why`" documentation is especially important for alerts because alerts are notorious for drifting out of sync with reality, at which point you need to bring them back in line for them to be useful. This is effectively debugging, and now I will point everyone to link:https://utcc.utoronto.ca/~cks/space/blog/links/CodeOnlySaysWhatItDoes[Code Only Says What it Does] and paraphrase a section of the lead paragraph:

Fundamentally, [updating alerts] is an exercise in changing what [an alert] does to match what it should do. It requires us to know what [an alert] should do, which isn't captured in the alert.

So, _alerts have intentions_, and we should make sure to document those intentions. Without the intentions, any alert can look stupid.
____

== link:https://github.com/caraesten/dial_a_zine[Dial-A-Zine]

[quote]
____
A content-management system for displaying a zine over telnet.
____

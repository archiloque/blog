= Links - Soon
Julien Kirch
v1.0, 2021-01-01
:article_lang: en
:figure-caption!:
:article_description:

== link:https://doriantaylor.com/agile-as-trauma[Agile as Trauma]

[quote]
____
The link:https://agilemanifesto.org/[Agile Manifesto] is an immune response on the part of programmers to bad management. The document is link:https://agilemanifesto.org/history.html[an expression of trauma], and its intellectual descendants continue to carry this baggage. While the Agile era has brought about remarkable advancements in project management techniques and development tools, it remains a tactical, technical, and ultimately reactionary movement. As long as Agile remains in this position it will be liable to backfire, vulnerable to the very depredations of bad management it had initially evolved to counter.
____

== link:https://blog.anayrat.info/en/2021/09/01/partitioning-use-cases-with-postgresql/[Partitioning use cases with PostgreSQL]

[quote]
____
To determine the best execution plan, Postgres makes decisions based on statistics. They are obtained from a sample of the table (the `default_statistic_target` which is 100 by default).

By default, postgres will collect 300 x `default_statistic_target` rows, that is 30 000 rows. With a table of several hundred million rows, this sample is sometimes too small.

We can drastically increase the sample size, but this approach has some drawbacks:

* It increases the planning time
* It makes the `ANALYZE` more heavy.
* Sometimes it is not enough if the data are not well distributed. For example, if you take a few hundred thousand rows from a table with several hundred million rows, you may miss the rows that are in delivery status.

With partitioning, we could have the same sample but per partition, which allows us to increase the accuracy.

This would also be useful when we have correlated data between columns. I will take the example of orders. We have a whole year’s worth of orders: all the orders that are more than one month old are delivered, those of the last month are 90% delivered (10% are in progress).

Intuitively, if I look for an order in progress more than 6 months ago, I should not get any result. On the other hand, if I search for orders in progress for the last month, I should get 10% of the table. But postgres doesn’t know that, for it, the orders in progress are spread over the whole table.

With a partitioning by date, it can estimate that there are no orders in progress for deliveries of more than one month. This approach is mainly used to reduce an estimation error in an execution plan.
____

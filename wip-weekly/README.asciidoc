= Links - Soon
Julien Kirch
v1.0, 2021-01-01
:article_lang: en
:figure-caption!:
:article_description:

== link:https://www.baldurbjarnason.com/2021/single-page-app-morality-play/[The Single-Page-App morality play]

[quote]
____
Generally, the delta between a mediocre Single-Page-App and a mediocre Multi-Page-App (i.e. a traditional server-rendered site) is usually massive, especially if you are targeting mobile devices. Given the same end goal and resources, most teams and managers will do a much better job of reaching their goals if they use a Multi-Page-App instead of a Single-Page-App. You can blame the tools, the browser landscape, developer training, or management, but that's just how it tends to pan out in practice.

I keep seeing Single-Page-Apps with huge JS files that only, in terms of concrete User Experience (UX) benefits, deliver client-side validation of forms plus analytics. Apps rarely leverage the potential of a Single-Page-App. It's still just the same ‘click, wait for load' navigation cycle. Same as the one you get with Multi-Page-Apps. Except buggier and with a much slower initial loading time.

When you look at performance, cross-platform and mobile support, reliability, and accessibility, nearly every Single-Page-App you can find in the wild is a failure on multiple fronts.

Replacing those with even a mediocre Multi-Page-App is generally going to be a substantial win. You usually see improvements on all of the issues mentioned above. You get the same general UX except with more reliable loading, history management, and loading features—provided by the browser.
____

[quote]
____
The Multi-Page-App forces the team to narrow the scope to a level they can handle. It puts a hard limit on their technological aspirations. Mandating a traditional Multi-Page-App under the auspices of performance, accessibility, or Search-Engine-Optimisation is a face-saving way to force the hand of management to be more realistic about what their teams can accomplish.
____

== link:https://neilmitchell.blogspot.com/2021/09/reflecting-on-shake-build-system.html[Reflecting on the Shake Build System]

[quote]
____
The most important thing Shake got right was adding monadic/dynamic dependencies. Most build systems start with a static graph, and then, realising that can't express the real world, start hacking in an unprincipled manner. The resulting system becomes a bunch of special cases. Shake embraced dynamic dependencies. That makes some things harder (no static cycle detection, less obvious parallelism, must store dependency edges), but all those make Shake itself harder to write, while dynamic dependencies make Shake easier to use. I hope that eventually all build systems gain dynamic dependencies.
____

== link:https://notes.andymatuschak.org/z66PNF1Wt4AZ4j7TVEenkvPZgvDcHPuSdJC2r[Note-writing practices provide weak feedback]

[quote]
____
One reason why link:https://notes.andymatuschak.org/z8V2q398qu89vdJ73N2BEYCgevMqux3yxQUAC[note-writing practices are generally ineffective] may be that note systems generally offer poor feedback.

If one starts a spaced repetition practice, they'll get strong feedback every day: if they write a bad question, it'll bother them immediately and regularly thereafter; they'll feel (to some extent) their growing retention of a given topic.

By contrast, in note-taking the feedback is very delayed: in typical practice, when you write a note, you may not see it again for weeks. The feedback is also ambiguous: if a note helps you distill some insight (or fail to), that usually won't be especially evident.
____

== link:https://notes.andymatuschak.org/zs5uUEv9iJH7JuAmsCChxBEMP2zW6CRbiAWE[Tool-makers usually lack connection to a serious context of use]

[quote]
____
People making link:https://notes.andymatuschak.org/z5YhNc8HVKxjg9a3h3SeCyKqnNDFgiY6WGrM[tools for thought] often say they're trying to help people do math, or make art, or whatever. But in reality, the people making these tools are rarely connected very deeply with the actual creative practices they're trying to amplify. The work is often more of a tech demo or a toy or a "`sandbox`". As we wrote in How can we develop transformative tools for thought?: "`Tools for writing that aren't used by actual writers. Tools for mathematics that aren't used by actual mathematicians`". Deep down, such system designers are generally developing a system for its own sake—not because there's some creative problem they're desperately trying to solve.

Such tools might look mathematical (or whatever) on their surface, but they're not seriously trying to answer hard problems in those domains—often because the creators don't actually know what those problems are or understand how to solve them. link:https://notes.andymatuschak.org/z3H98n8DGZmu8XArqHZVsckyWvbTe8wK4kAt2[Effective system design requires insights drawn from serious contexts of use].
____

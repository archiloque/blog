= Links - 3^rd^ March 2024
Julien Kirch
v1.0, 2024-03-03
:article_lang: en
:figure-caption!:
:article_description: Open source and public work, microservices, bad software existing, scheduling internals, leadership

== link:https://utcc.utoronto.ca/~cks/space/blog/tech/OpenSourceCultureAndPublicWork[Open source culture and the valorization of public work]

[quote]
____
This view runs deep in open source culture, which valorizes public work even at the cost of stress and time. Open source culture on the one hand tacitly assumes that everyone has those available, and on the other hand assumes that if you don't do public work (for whatever reason) that you are less virtuous or not virtuous at all. To be a virtuous person in open source is to contribute publicly at the cost of your time, energy, stress, and perhaps money, and to not do so is to not be virtuous (sometimes this is phrased as "`not being dedicated enough`").

(Often the most virtuous public contribution is "`code`", so people who don't program are already intrinsically not entirely virtuous and lesser no matter what they do.)

Open source culture has some reason to praise and value "`doing work that scales`", public work; if this work does not get done, nothing happens. But it also has a tendency to demand that everyone do it and to judge them harshly when they don't. This is the meta-cultural issue behind things like link:https://utcc.utoronto.ca/~cks/space/blog/tech/BugReportExperienceObligation[the cultural expectations that people will file bug reports], often no matter what the bug reporting environment is like or if filing bug reports does any good (link:https://utcc.utoronto.ca/~cks/space/blog/tech/BugReportBenefit[cf]).

I feel that this view is dangerous for various reasons, including because it blinds people to other explanations for a lack of public contributions. If you can say "`people are not contributing because they're not virtuous`" (or not dedicated, or not serious), then you don't have to take a cold, hard look at what else might be getting in the way of contributions. Sometimes such a cold hard look might turn up rather uncomfortable things to think about.
____

== link:https://newsletter.pragmaticengineer.com/p/zirp-engineering-practices[The end of 0% interest rates: what it means for software engineering practices]

[quote]
____
Every organization that's all-in on microservices must deal with challenging downsides. The benefits of microservices matter during hypergrowth, but not when the engineering organization stops doubling in size, annually. Then, it makes sense to consolidate services and use a more sensible services strategy.

In 2020, Uber announced a link:https://www.uber.com/en-NL/blog/microservice-architecture/[domain-oriented microservice architecture] to reduce systems' complexity. This approach wrapped dozens of microservices into a single "`domain,`" to reduce the number of communication surfaces, while teams migrated small services into larger, "`well-sized`" services.

In 2022, Monzo link:https://monzo.com/blog/2022/06/24/redefining-our-microservice-development-process[shed light on the tooling pain] of managing 2,500 services. The online bank is investing in more tooling to overcome these issues.

Monoliths can mean a safer bet when growth isn't expected. The upsides and downsides of monolith services are the opposite to those of microservices. Monoliths do poorly when you onboard a large number of new engineers, because everyone is stepping on each other's toes. But they work well when there's a good rhythm of development and deployment, so long as the team doesn't grow too fast.

Stripe is link:https://newsletter.pragmaticengineer.com/i/140970283/the-future-of-dev-productivity-services[in the middle of breaking up its monolith into larger services], while elsewhere, Shopify link:https://shopify.engineering/deconstructing-monolith-designing-software-maximizes-developer-productivity[modularized its Ruby on Rails monolith]. These companies prove that starting out with a monolith, and then breaking it into smaller chunks as you grow, is a viable option during rapid growth.

I'm hearing more accounts of the pain of having too many microservices after deep cuts. A Fintech that employed 8,000 staff at its peak, including 2,000 engineers, did mass layoffs and brought headcount down to around 5,000, with engineering below 1,500.
____

[quote]
____
Architecting to solve a current pain point could become more common. During times of fast growth, it makes a ton of sense to design systems for future expected loads, even if they fail to materialize.

For example, this approach was why Fast hired so many software engineers, who built state-of-the-art payments systems capable of processing billions in currency. A good part of the engineering team had built these types of systems before; including on Uber's payments team.
____

== link:https://seancoates.com/blogs/exists-is-the-enemy-of-good[Exists is the enemy of good]

[quote]
____
We've all heard the adage "`__perfect is the enemy of good__`". I take this to mean: if you only accept _perfect_, you might miss a _good-enough_ solution. I still try to strive for perfect, but have learned to accept that _good_ might be sometimes enough.

However, I've been saying something to friends and colleagues -- for probably a decade now -- that is closely related: _exists is the enemy of good_.

This idea is pretty simple, in principle: sometimes we miss a _good-enough_ solution because a _not-quite-good-enough_ solution is already out there and in use.

When I came up with this, it was specifically about bad software that _seems good enough_. Usually, stakeholders are less willing to invest in a _good_ solution when one already _exists_.
____

== link:https://tontinton.com/posts/scheduling-internals/[Scheduling internals]

== link:https://cutlefish.substack.com/p/tbm-274-how-capable-leaders-navigate[TBM 274: how capable leaders navigate uncertainty and ambiguity]

[quote]
____
Encourage New Interaction Patterns

The ability to encourage new interaction patterns within an environment rather than solely attempting to change (or remove) individuals. Help individuals connect and become exposed to new information and experiences.
____

[quote]
____
Patient Divergence

The ability to encourage productive divergence and resist the urge to converge on a solution or path forward prematurely. Fostering an environment conducive to creative exploration and following multiple "`threads`", allowing alignment to happen without forcing it.
____

[quote]
____
Coherence vs. Alignment

The ability to seek coherence instead of alignmentâ€”setting boundaries and "`no go`" areas but encouraging people to explore broadly and in multiple directions simultaneously within those boundaries. Acknowledging that forced alignment is fragile, and that generally coherent actions are resilient.
____

= Links - 10^th^ December 2017
Julien Kirch
v1.0, 2017-12-10
:article_lang: en
:article_description: Design thinking, startup frauds, computer architecture for network engineers

== link:https://medium.com/@sts_news/design-thinking-is-kind-of-like-syphilis-its-contagious-and-rots-your-brains-842ed078af29[Design thinking is kind of like syphilis -- It`'s contagious and rots your brains]

[quote]
____
What Miller, Kelly, and Hennessy are asking us to imagine is that _design consulting_ is or could be a model for retooling all of education, that it has some method for "`producing reliably innovative results in any field`". They believe that we should use Design Thinking to reform education by treating students as customers, or clients, and making sure our customers are getting what they want. And they assert that Design Thinking should be a central part of what students learn, so that graduates come to approach social reality through the model of design consulting. In other words, we should view all of society as if we are in the _design consulting business_.
____

== link:https://matt.sh/anatomy-of-a-fraud[Anatomy of startup frauds]

[quote]
____
Forbes recently outlined The Ugly Unethical Underside of Silicon Valley describing the rise of objectively fraudulent tech companies. Numerous marketing-over-substance bubbles have shattered in the past few years, and there are more companies collapsing soon.

Tech frauds are built on top of three layers:

* Software with Unlimited Scapegoats
* S.C.R.E.A.M. (Sales and Consulting Rule Everything Around Me)
* Shady Foundings

You can protect yourself from tech frauds easily. Even though it can be difficult discerning numerous bad-faith behaviors from the endless "`blameless mistakes`" of software development, objectively recording how your vendors lie can quickly reveal patterns of fraud in plain sight.
____


== link:https://github.com/lukego/blog/issues/18[Computer architecture for network engineers]

[quote]
____
Suppose you are a network engineer and you want to understand how modern x86 CPUs work under the hood. Cache-misses, out-of-order execution, pipelined execution, etc. One approach is to read a big heavy book like link:https://www.amazon.com/Computer-Architecture-Fifth-Quantitative-Approach/dp/012383872X[Hennessy and Patterson]. However, there is also a short-cut.

CPUs are basically networks these days (link:https://github.com/lukego/blog/issues/15[#15]) and their mechanisms all have direct analogues in TCP. In fact, if you have spent time troubleshooting TCP performance problems in wireshark it`'s entirely likely that you have a more visceral intuition for CPU performance that most software people do.
____

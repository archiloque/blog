= Links - 9^th^ January 2022
Julien Kirch
v1.0, 2022-01-09
:article_lang: en
:figure-caption!:
:article_description: Trauma, cross-platform native desktop applications, JVM features, it's your problem now, fast kernel headers, micro blogging from iOS notes app, Debian's approach to Rust, writing

== link:https://twitter.com/fakebaldur/status/1473612527313506305[Trauma & growth]

[quote]
____
I don't know who needs to hear this but in case it's one of you: trauma and developing mechanisms to cope with trauma isn't growth. Anybody telling you that you need to join a traumatic environment or workplace to grow in your job or as a person is doing you a huge disservice.
____

== link:https://github.com/nodegui/nodegui[A library for building cross-platform native desktop applications with Node.js and CSS]

[quote]
____
Build performant, native and cross-platform desktop applications with Node.js and CSS like styling.

NodeGUI is powered by Qt5 which makes it CPU and memory efficient as compared to other chromium based solutions like Electron.
____

== link:https://advancedweb.hu/a-categorized-list-of-all-java-and-jvm-features-since-jdk-8-to-17/[A categorized list of all Java and JVM features since JDK 8 to 17]

== link:https://devblogs.microsoft.com/oldnewthing/20211229-00/?p=106061[You can't copy code with memcpy; code is more complicated than that]

[quote]
____
The idea is that they want to inject some code into a target process, so they use `VirtualÂ­Alloc` to allocate some memory in that process. The first part of the memory block contains some data that they want to pass. The second part of the memory block contains the code bytes that they want to execute, and they tell `CreateÂ­RemoteÂ­Thread` execution at those code bytes.

I'm just going to say it right now: The entire idea that went into this code is fundamentally flawed.
____

== link:https://apenwarr.ca/log/20211229[The gift of it's your problem now]

[quote]
____
Here's the thing about gifts: the sender chooses them, not the recipient. We can have norms around what gifts are appropriate, and agreements to not over-spend, and wishlists, and so on. But I won't always get the exact gift I want. Sometimes I didn't even want a gift. Sometimes the gift interprets JNDI strings in my log messages and executes random code from my LDAP server. This is the nature of gifts.
____

[quote]
____
Many developers and companies have been disappointed to learn that just uploading your code to GitHub doesn't make a community of developers appear. (It does make it more likely that AWS will fork your product and make more money from it than you do.)
____

== link:https://lwn.net/ml/linux-kernel/YdIfz+LMewetSaEB@gmail.com/[ANNOUNCE, RFC "`Fast kernel headers`" tree -v1: eliminate the Linux kernel's "`dependency hell`"]

[quote]
____
The fast-headers tree offers a +50-80% improvement in absolute kernel build 
performance on supported architectures, depending on the config. This is a 
major step forward in terms of Linux kernel build efficiency & performance.

A justified question would be: why on Earth 2,200 commits??

Turns out it's not easy to reduce header dependencies, at all:

* When I started this project, late 2020, I expected there to be maybe  50-100 patches. I did a few crude measurements that suggested that about  20% build speed improvement could be gained by reducing header dependencies, without having a substantial runtime effect on the kernel. Seemed substantial enough to justify 50-100 commits.
* But as the number of patches increased, I saw only limited performance increases. By mid-2021 I got to over 500 commits in this tree and had to  throw away my second attempt (!), the first two approaches simply didn't scale, weren't maintainable and barely offered a 4% build speedup, not worth the churn of 500 patches and not worth even announcing.
* With the third attempt I introduced the per_task() machinery which brought the necessary flexibility to reduce dependencies drastically, and it was a type-clean approach that improved maintainability. But even at 1,000 commits I barely got to a 10% build speed improvement. Again this 
was not something I felt comfortable pushing upstream, or even announcing. :-/
* But the numbers were pretty clear: 20% performance gains were very much possible. So I kept developing this tree, and most of the speedups started arriving after over 1,500 commits, in the fall of 2021. I was very surprised when it went beyond 20% speedup and more, then arrived at the current 78% with my reference config. There's a clear super-linear improvement property of kernel build overhead, once the number of dependencies is reduced to the bare minimum.
____

== link:https://www.witchoflight.com/posts/#2021-12-18-what-this-thing-is[What this thing is]

[quote]
____
I decided to make a bad micro blogging platform that uses the iOS notes app as its content source. It seemed like a good/bad idea, but also an easy one, side I already had the reading list code.

How it works:

. I write content inside the iOS notes app, in a dedicated folder for posts.
. I run an iOS shortcut which gathers up the information and formats it. This formatting is joining some properties like the creation and modification date, and the actual text, with the unicode UNIT SEPARATOR character. Then, joining each post with the FILE SEPARATOR character. Finally, sending a request to my server with that as the body.
. This passes through nginx as a (reverse?) proxy so I don't have to do HTTPS in the Rust server (Rocket ðŸš€ doesn't support it in a production ready way yet.)
. The Rust server saves the file in a directory as a dated file and also current.usv
. The Rust server renders current.usv with a Tera template and saves that in my web content folder
. nginx serves static files out of that folder so you can see these

I think iOS shortcuts are really cool, and I love building tiny servers, and USV is a good format.
____

== link:https://diziet.dreamwidth.org/10559.html[Debian's approach to Rust -- Dependency handling]

[quote]
____
That leaves two possibilities for the semantics of a dependency _A depends B, version(s) V..W_: _Precise: A will definitely work if B matches V..W_, and _Optimistic: We have no reason to think B breaks with any of V..W_.
____

== link:https://notebook.drmaciver.com/posts/2022-01-07-14:02.html[Writing as yourself]

[quote]
____
There's a simple method to doing anything. Do you know it?

It goes like this:

. Be the sort of person who can do the thing.
. Do the thing.

How do you become the sort of person who can do the thing?

Well, if you're not already, first you need to be the sort of person who can become the sort of person who can do the thing, then you become the sort of person who can do the thing.

This isn't an infinite regress. It's just the fully general system for learning to do hard things -- eventually you bottom out by finding something that is only just outside your comfort zone.
____

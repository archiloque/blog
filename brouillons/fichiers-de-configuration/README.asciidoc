= Fichiers de configuration
Julien Kirch
v0.1, 2021-05-25
:article_lang: fr
:source-highlighter: pygments
:pygments-style: friendly

Vous √©crivez un programme, et vous d√©cidez d'utiliser un fichier de configuration.

== Jusqu'ici tout va bien

La premi√®re √©tape est de d√©finir une s√©rie de cl√©-valeur, c'est-√†-dire l'√©quivalent de ce qu'on pourrait trouver dans des param√®tres ou des variables d'environnements.

[source,ini]
----
property_1=value_1
property_2=value_2
----

Jusque l√† tout va bien.

Il peut √™tre n√©cessaire de pouvoir utiliser des `=` ou des `"` dans les valeurs, il est n√©cessaire de pouvoir g√©rer les √©chappements.

[source,ini]
----
property_1="val=ue1"
property_2="va=lu\"e_2"
----

Ensuite, on peut vouloir que certaines valeurs ne soient pas seulement des cha√Ænes de caract√®res, mais aussi parfois des listes ou des dictionnaires.

[source,ini]
----
property_1=["val=ue1", "val=ue11"]
property_2={"va=lu\"e_2": "a", "va=lu\"e_22": "b"}
----

Et pour finir on peut vouloir organiser le contenu du fichier en d√©finissant des sections pour faciliter le fait de grouper des propri√©t√© qui vont ensemble.

[source,ini]
----
[section 1]
property_1=["val=ue1", "val=ue11"]
[section 2]
property_2={"va=lu\"e_2": "a", "va=lu\"e_22": "b"}
----


On a ici d√©pass√© ce qu'on peut faire directement avec des param√®tres ou des variables d'environnements (s'il reste possible de passer des listes dans des cha√Ænes de caract√®res et d'utiliser des pr√©fixes pour simuler les sections, cela reste des contournements qui n'offrent pas le m√™me niveau de lisibilit√©).

Cette √©tape correspond pour moi au point d'utilit√© maximale des fichiers de configuration : on est capable de saisir du contenu avec une certaine expressivit√© et aucun traitement n'est apport√© ensuite au contenu, ce qui fait que le contenu visible est exactement celui qui sera utilis√©.

(En r√©alit√© ce n'est pas exactement le cas √† cause des √©chappements, mais je pense que sauf en de tr√®s rare situations il n'est pas possible de s'en passer.)

== √áa commence √† ne plus aller

Quand le fichier de configuration s'allonge et se r√©p√®te, le r√©flexe quand on travaille dans le d√©veloppement est de vouloir factoriser le contenu.
Par exemple en attribuant un nom √† un certain contenu, et en utilisant ce nom pour inclure ce contenu ailleurs dans le fichier

[source,ini]
----
&üê±=nya

property_1=*üê±
property_2=*üê±
----

Dans ce cas le contenu que vous √©ditez n'est plus celui qui sera utilis√© car le fichier va subir un traitement qui va modifier son contenu.
Il peut devenir int√©ressant de pouvoir avoir acc√®s au contenu trait√© tel qu'il sera visible depuis le programme qui va l'utiliser.

Dans l'exemple ci-dessus, cela signifie √™tre en mesure d'obtenir ce contenu :

[source,ini]
----
property_1=nya
property_2=nya
----

Cela signifie s'appuyer sur un programme externe s'il s'agit d'une syntaxe normalis√©e et que de tels outils existent, ou de fournir cette capacit√© via ce programme.

''''

√Ä r√©diger :

Quand on a factorisation en cascade, on se retrouve √† avoir du mal √† suivre ce qui se passe, parfois on a ajoute l'√©quivalent de logs en √©crivant des contenus interm√©diaires pour pouvoir suivre ce qui se passe, et on aimerait bien pouvoir d√©bugger dans les cas extr√™me.

On a un traitement => c'est un programme qu'on execute.

Suite : les conditions, et les boucles.

Dans ce cas on a clairement un comportement dynamique.

Souvent on a du mal √† se dire qu'on veut du code car on voit √ßa comme de la configuration, mais ce n'est pas diff√©rent d'une phase de compilation.

Il y a quelques ann√©es c'√©tait difficile d'utiliser un langage de programmation pour √ßa mais √ßa n'est plus le cas.

Je pense m√™me qu'il est souhaitable d'avoir un language de programmation statique, qui permette de faire de la v√©rification de format et le typage sur le contenu. L'√©quivalent des validation de sch√©ma en XML.

On peut le faire depuis le code qui utilise la configuration, mais l'avoir dans le langage de configuration permet d'avoir de la validation dans l'√©diteur.
= Les devs et leurs outils de développement
Julien Kirch
v0.1, 2022-06-15
:article_lang: fr

Une proportion importante des devs sont attaché·e·s à leurs outils de développement, leurs outils de développement qu'iels ont choisi.

== Pas tout le monde

Même si ça n'est pas mon sujet aujourd'hui, je dis "`une proportion significative`", car même si cela est assez courant et même link:../pris-au-serieux[valorisé], ce n'est pas le cas de tous les devs.

D'ailleurs, contrairement à ce qu'on entend parfois, je pense que se préoccuper de ses outils n'est pas un indicateur de compétence technique ni dans un sens (se préoccuper de ses outils est un signe de compétence) ni dans l'autre (ne pas se préoccuper de ses outils est un signe d'incompétence){nbsp}: j'ai rencontré suffisament de contre-exemples des deux types pour m'en convaincre.

== Quels critères ?

Donc certain·e·s devs ont des préférences, et dans le cadre de mon travail, en tant que responsable technique il faut que je détermine quelle doctrine appliquer dans ce sujet.

Mes besoins sont les suivants{nbsp}:

- Dans la mesure où cela n'est pas une gène significative je voudrais que les personnes soient aussi libres que possible dans le choix de leurs outils, cela peut ainsi vouloir signifier utiliser un formateur standard raisonablement efficace disponible sur de nombreux outtils plutôt que le formateur intégré à un outil particulier même s'il est plus puissant.
- Pour les personnes n'ayant pas d'avis, je pense qu'il est souhaitable qu'il y ait un choix par défaut à leur proposer, avec l'engagment que si elles choisissent cet outil elles peuvent compter sur un certain niveau de support.
- Même si je ne suis pas redevable de la productivité individuelle des membres de l'équipe, si les personnes ne sont pas efficaces à cause d'un outil qu'elles utilisent parce que je l'ai proposé alors c'est de ma faute, par contre la productivité des personnes qui choisissent leur propre outil est leur problème.

Le fait d'avoir un outil par défaut a aussi l'avantage de définir un étalon en terme de fonctionalités et de productivité.

Quand je parle de productivité d'outils de développement cela ne signifie pas seulement la capacité à éditer du code mais aussi à naviguer dans le code, accéder à de la documentation, débugguer…

Quand je développais en Java, les choses étaient assez simples{nbsp}: en Java les personnes utilisent le plus souvent des IDEs qui sont compatibles entre eux, et le niveau d'attente est partagé

== En Ruby

Mais actuellement je travaille sur un projet Web en Ruby où les choses sont plus diverses{nbsp}:

- Visual Studio Code est très populaire, et c'est l'outil de références dans certaines formations
- RubyMine est relativement populaire, nottament chez les personnes qui faisaient du Java avant de se mettre à Ruby et qui ont donc l'habitude d'un IDE
- Vim n'est pas un outil de niche, même s'il est moins populaire que Visual Studio Code (  )
= Abstractions et sÃ©nioritÃ©
Julien Kirch
v0.1, 2019-08-28
:article_image: abstraction.jpg
:article_description: ğŸ’• les ORMs
:article_lang: fr

[quote]
____
Les link:https://fr.wikipedia.org/wiki/Mapping_objet-relationnel[ORMs] c'est bon pour les personnes qui ne savent pas faire de SQL.
Les requÃªtes gÃ©nÃ©rÃ©es ne sont pas optimisÃ©es et il y a plein de cas compliquÃ©s Ã  gÃ©rÃ©s.

Les vrais dÃ©veloppeurs se passent d'ORM et Ã©crivent eux-mÃªme leurs requÃªtes SQL.
____

Les abstractions sont souvent imparfaites{nbsp}: elles peuvent simplifier certaines choses mais la simplification peut ne pas fonctionner dans tous les cas, par exemple en ne couvrant pas certaines situations spÃ©cifiques.

Une abstraction peut aussi introduire des inefficacitÃ©s{nbsp}: en prÃ©sentant un modÃ¨le simplifiÃ© elle peuvent permettre de gagner du temps au dÃ©triment d'une solution fait-main.

C'est par exemple le cas des ORMs{nbsp}: ils peuvent permettre d'Ã©crire moins du code, ou de mieux organiser ce code que sous forme de requÃªtes SQL Ã©crites "`Ã  la main`", mais les requÃªtes gÃ©nÃ©rÃ©es par ce types d'outils peuvent Ãªtre moins efficaces.

Plus on a d'expÃ©rience avec les bases de donnÃ©es et le SQL, plus on a conscience des limites ou simplement des imperfections des ORMs, ce qui correspond Ã  l'Ã©cart entre ce que l'outil fait et ce qu'on pourrait faire Ã  la place de l'outil.

Dans une situation oÃ¹ cela nous gÃ¨ne, on a les dents qui grincent.
Parfois cette gÃ¨ne est lÃ©gitime car elle a des consÃ©quences mesurables, mais parfois il s'agit simplement d'une frustration causÃ©e par l'Ã©cart entre le fonctionnement observÃ© et la situation idÃ©ale, mÃªme si cet Ã©cart n'a aucune importance.

La citation qui ouvre l'article est un classique{nbsp}: celui des personnes obsÃ©dÃ©es par l'inefficacitÃ© des ORMs au point d'en faire leur bÃªte noire.
Dans mon expÃ©rience personnelle, ces mÃªmes personnes -- souvent des personnes ayant de l'expÃ©rience et donc un certain type d'influence -- ont du mal Ã  concevoir qu'on puisse ne pas partager leur avis{nbsp}: si on n'est pas d'accord avec elles c'est par ignorance.
Partager leur avis est un signe de compÃ©tence qui montre qu'on en sait assez pour comprendre.

Il peut Ãªtre tentant de partager leur avis pour faire partie du club.

Mais il ne s'agit pas de la seule attitude possible{nbsp}:
si mieux comprendre le fonctionnement interne des systÃ¨mes fait mieux comprendre les imperfections des abstractions, il peut aussi permettre de mieux percevoir les avantages confÃ©rÃ©s par les abstractions, par exemple la capacitÃ© Ã  garder la complexitÃ© sous contrÃ´le, ou un usage simplifiÃ© pour les cas nominaux.

Ainsi connaÃ®tre de fond en comble une base de donnÃ©es et un ORM peut permettre de percevoir que l'inefficacitÃ© des requÃªtes qu'il produit peut Ãªtre acceptable et de savoir comment s'en sortir dans les cas limites sans remettre en cause tout le modÃ¨le.

On peut donc Ãªtre expÃ©rimentÃ©Â·e, trÃ¨s bien savoir de quoi on parle et apprÃ©cier les abstractions.
Quand on voit un requÃªte pas super, on a toujours les dents qui grincent, mais on sait qu'il s'agit de la moins mauvaise solution.
Et en cas de besoin, on sait faire en sorte d'inciter l'outil Ã  gÃ©nÃ©rer la bonne requÃªte sans casser tout le modÃ¨le et en vouloir Ã  la terre entiÃ¨re.

Il est toujours tentant de rejeter une solution existante mais imparfaite pour quelque chose qu'on pense savoir mieux faire soi-mÃªme.
Il est aussi tentant de mettre en avant ce qu'on sait et (qu'on pense) que les autres ne savent pas.

Mais rappelez-vous que ce n'est pas la seule possibilitÃ©.

Cela ne veut pas dire qu'une abstraction est toujours une bonne chose, ou qu'utiliser un ORM est toujours la bonne solution (surtout Hibernate).

Mais parfois c'est le cas, la sÃ©nioritÃ© c'est aussi savoir faire des compromis et accepter de ne pas faire partie de certains clubs.
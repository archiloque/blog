[#baba-is-you-4]
ifeval::["{doctype}" == "book"]
= Part 4: printing a solution
endif::[]
ifeval::["{doctype}" != "book"]
= Writing a "`Baba Is You`" solver, part 4: printing a solution
endif::[]
:author: Julien Kirch
:revnumber: v0.1
:docdate: 2019-05-09
:article_lang: en
:ignore_files: app1.java, app2.java, level1.java, log1.txt, state1.java, state2.java
:article_image: first-level1.png
ifndef::source-highlighter[]
:source-highlighter: pygments
:pygments-style: friendly
endif::[]
:article_description: Binary manipulations
:figure-caption!:

ifeval::["{doctype}" == "book"]
Following the third part,
endif::[]
ifeval::["{doctype}" != "book"]
Following link:../baba-is-you-3/[the third part],
endif::[]
where I solved the first level, this short part will deal with printing the solution.

== If the computer say it, it must be true!

I said I solved the first level, at least it's what the computer told me:

[source]
----
include::log1.txt[]
----

But it would be nice if the code told me _how_ it solved it, it would allow me to check if the solution looks reasonable, and it would allow me to use the solution to solve the level.

Which is the goal of the whole thing.

== States gonna be stateful

To implement this, a `State` must store the movements that lead to it, which means each `State` must concatenate the movement it adds to a list of previous movements.

.State.java
[source,java]
----
include::state1.java[]
----

Then when the solution is found, I write it in the same directory as the level, so any change can be identified with a source control system.
The file is deleted before trying to solve the level so I can detect when the solver fails.

Without pretty printing, the path would be something like `→→→→→→←←←` which is not easy to read.

.App.java
[source,java]
----
include::app1.java[]
----

The result:

.levels/00/solution.txt
[source]
----
6→ 3← 1↓ 5→
----

== Wait, what?

Huh? The last step is missing?!

Which is normal, since the data used is the path to the last `State`, which lacks the last movement done inside the `State`.

The solution is to add the last movement to the past movements, and to return this value as the result, it requires a bunch of modifications but the migration is easy.

.State.java
[source,java]
----
include::state2.java[]
----

In `Level` the value is propagated.

.Level.java
[source,java]
----
include::level1.java[]
----

And in `App`, this value is printed.

.App.java
[source,java]
----
include::app2.java[]
----

Which prints the right solution

.levels/00/solution.txt
[source]
----
6→ 3← 1↓ 5→ 1↑
----

I'm skipping the refactoring to do in the tests here since they are simple and don't bring anything.

In the next part I'll add some missing behaviors.
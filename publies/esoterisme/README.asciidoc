= Comprendre l'informatique grâce à l'ésotérisme
Julien Kirch
v0.1, 2019-04-13
:article_lang: fr
:article_image: rose.jpg
:article_description: Parfois la science n'est pas la bonne approche
:figure-caption!:

Comprendre l'informatique est compliqué.

Il y a beaucoup de langages de développement, beaucoup d'outils, beaucoup de méthodes.

Pour à y avoir clair, il faut commencer par comprendre en quoi ils consistent{nbsp}:
apprendre quelques langages, quelques outils, quelques méthodes.

C'est un bon début.

Mais pour prendre du recul et avoir une vue d'ensemble, il y a besoin de comprendre le fonctionnement des systèmes dans lesquels ils vivent{nbsp}:

Pourquoi est-ce qu'il y a autant de langages de programmation{nbsp}? Comment se situent-ils les uns aux autres{nbsp}? Comment est ce que les différents paradigmes évoluent{nbsp}? Pourquoi toutes ces querelles de chapelles qui tournent parfois mal{nbsp}?

Même chose sur les outils de travail ou les manières de travailler.

S'agissant d'outils et de théories, et le développement informatique ayant des liens avec la science, je me disais que le modèle de la recherche scientifique pourrait être un bon exemple duquel s'inspirer.

Malheureusement ce modèle a un gros défaut (pour cet usage){nbsp}:
la recherche scientifique peut s'appuyer sur des mesures pour vérifier telle ou telle théorie, et ainsi progresser.

Même si l'histoire de la science n'est pas simplement "`une meilleure théorie est inventée, elle a de meilleurs résultat, tout le monde le comprend immédiatement`", la capacité d'avoir des résultats expérimentaux aide quand même beaucoup pour choisir une approche plutôt qu'une autre.

Dans l'informatique les mesures sont beaucoup plus rares et partiales{nbsp}:
difficile de mesurer ou de prouver qu'un langage de programmation est mieux qu'un autre.

Mon idée est que l'ésotérisme fournit un modèle beaucoup plus proche de celui de l'informatique et plus éclairant pour le comprendre.

image::rose.jpg[title="Voici pourquoi il faut utiliser GNU Emacs"]

L'ésotérisme est constitué de système de pensées concurrents qui évoluent et qui s'affrontent avec une capacité faible de les évaluer (à part parfois pour leur cohérence interne, mais pas toujours).

À l'inverse de la science, elle fournir un cas "`idéal`" permettant d'observer comment des idées peuvent évoluer sans s'encombrer de la science et du réel, comme c'est assez souvent le cas dans l'informatique.

Un exemple de parallèle est celui du génie presque oublié dont on pense que l'œuvre ne peut être vraiment comprise que par quelques élus, et dont on continue à révérer le nom des dizaines d'années après est un grand classique de l'informatique, de McCarthy pour le Lisp à Stallman pour GNU Emacs.

Un autre est la fascination pour le vocabulaire difficile à comprendre servant de link:https://fr.wikipedia.org/wiki/Schibboleth[Schibboleth].
Chaque groupe invente son vocabulaire et son formalisme propre, lui permettant de mettre en avant des différences avec le groupe d'à côté, même s'il ne s'agit parfois que de différences de forme dissimulant mal une absence de différence sur le fond.

En résumé{nbsp}: pour comprendre l'informatique, je vous conseille de commencer par lire des livres d'ésotérisme, par exemple link:https://www.bloomsbury.com/au/western-esotericism-a-guide-for-the-perplexed-9781441136466/[ce guide de l'ésotérisme occidental] qui est une très bonne introduction.

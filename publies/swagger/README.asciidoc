= Swagger: live it to the fullest
Julien Kirch
v1.0, 2016-03-01
:article_lang: en
:article_description: Some guidance on how to use your swagger info
:ignore_files: petstore_1.rb, petstore_2.rb, test_petstore.rb, swagger_1.json, swagger_2.json

== Introducing Swagger

link:http://swagger.io[Swagger] is a technical description of a REST API which is readable yet powerful.
You can use it to define precisely your services: what parameters should be used, return codes and types, characteristics of each fields, etc.

Example:

[source, json]
----
include::swagger_1.json[]
----

[source, json]
----
include::swagger_2.json[]
----

What is mainly viewed as a documentation for the API consumers is actually  a _technical specification_ of your API,
and this has many consequences on what you should do with it.

== The only thing worse than no specification is a wrong specification

If you want your specification to be useful you need it to be right.
In this case, it means the swagger content should be coherent with your code.

The best way to do it is to make your services unit tests swagger-aware:

- Read your swagger info at the beginning of your tests.
- Each time you call a service in a test, validate that the parameters and results match the swagger's content.
- If it doesn't, fail the test.

Example:

[source,ruby]
.petstore.rb
----
include::petstore_1.rb[]
----

[source,ruby]
.test_petstore.rb
----
include::test_petstore.rb[]
----

There's existing tool for several frameworks doing it for you; and if it doesn't you can hack one in a few hours (I've done it link:https://github.com/archiloque/sinatra-swagger-exposer[myself]).

=== The generated swagger case

If you use a statically-typed language like java that use link:https://spring.io/guides/gs/rest-service/[annotation-like metadata to define your REST endpoints], you probably generate the swagger content from your code instead of writing it.

As the swagger is generated from your code, you may think you don't need this kind of tests because the compiler and/or your framework validate everything for you.

But I have a bad news for you, there's two reasons why you still should do it:

==== All metadata are not checked

All the metadata information is not checked, for example if you specify the minimum number for the value of the max length of a string, it won't be checked automatically.

==== Don't break the API

When you publish an API the last thing you want is to break it unknowingly: you should version your API and carefully manage the incompatible changes.

When the swagger is manually written, validating your services against it ensure that you don't introduce any change in your API. But if you generate the swagger, a bad "`rename attribute`" in your code can break your API.

Even if code reviews should prevent this kind of things, it's better to rely on an automatic validation:

- Each time you publish a new API version, export the generated swagger content, and store it with your code and don't touch it.
- Apply the testing approach described before with the archived swagger.
- When you want to add a change:
** export the new swagger,
** compare it with the archived one,
** if the change is ok for you, you can replace the archived version.

This way you'll be sure that you won't break your API.

== The best thing about a specification is when you can leverage it in your runtime code

After adding the test validation I just described, you decide to add another endpoint:

- You first add the description to the swagger, specifying that a person's name should be `maxlength: 400` characters (because the CRAM can't process longer names).
- You write the service code, the first line being `ensureLength(person.name, 400);`
- You just wrote the same exact thing two times: something is wrong.

You probably guessed what I'm going to say: you should also rely on the swagger information at runtime to act like a link:https://en.wikipedia.org/wiki/Application_firewall[application firewall]: each query should be matched by a technical layer with the swagger content before reaching your application code.

Example:

[source,ruby]
.petstore.rb
----
include::petstore_2.rb[]
----

If you hacked a tool for the testing case, updating it to manage this case should be a simple task since all the complicated stuff is already done.

(In my opinion this should be a perfect use case for API management solutions. I hope they'll add this feature soon and talk about it so people will hear about it.)

Again, if you use a statically-typed language, your framework should already cover parts of the validations but not all of them, so you still should do it for the missing ones.

== Take Away

* Test that your swagger content is synchronized with your code, even if the swagger is generated from the code
* Rely on the swagger content to validate the request to your app
